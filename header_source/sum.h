#ifndef _INCUDE_SUM_ /* _INCLUDE_ファイル名_ が定義済みでなければ */
#define _INCLUDE_SUM_ /* _INCLUDE_ファイル名_ をここで定義するよ */
/* こうすることによって他の同名のヘッダファイルと重複することを防ぐ */

/* ヘッダファイルは関数のプロトタイプ宣言のみ書く */
extern int sum(int min, int max);

/* 宣言 => コンパイラがその名前と形を記憶
   定義 => コンパイラが実際に変数や関数を作成する

   これまでの宣言ではこれが同時に行われていた。
   宣言は何度でもできるが、定義は同じ名前で２度行われるとエラーになる。
   よって、変数をファイル間で共有するのに普通の宣言
   int i;
   は定義も行われるのでそれぞれのファイルで行うとエラーになる。
   (↑ のプロトタイプ宣言は、宣言のみなので extern 無しでも OK)

   そこで、定義はしない宣言の仕方 */
extern int Public;

#endif /* ifndef は endif で閉じる */
